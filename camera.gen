/*
 * Copyright (c) 2022-2023 LAAS/CNRS
 *
 * Author: Selvakumar H S - LAAS/CNRS
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma require "felix-idl"
#pragma require "vision-idl"

#include "or/sensor/camera.gen"

/* -------------------------- MODULE DECLARATION --------------------------- */
component MonocularCamera {
  version "1.0";
  email	  "shasthamsa@laas.fr";
  lang	  "c";
  doc 	  "A GenoM module for monocular camera integration.";

  codels-require "opencv4, felix-g3utils, vision-idl";

  exception e_BAD_IMAGE_PORT { short code; string<128> message; };
  exception e_OPENCV_ERROR { short code; string<128> message; };
  exception e_OUT_OF_MEM { short code; string<128> message; };
  exception e_BAD_CONFIG { short code; string<128> message; };

  /* -------------------------- IDS --------------------------- */
  ids {
    or::sensor::intrinsics intrinsics;	        // Camera intrinsics
    or::sensor::extrinsics extrinsics;	        // Camera extrinsics
    or::sensor::frame image_frame;		        // Image frame

    boolean debug, show_frames;
    octet v_level;
  };

  /* ------------- DEFINITION OF PORTS -------------- */
  // Camera
  port out or::sensor::frame ImageFrame {
    doc "The image frame from monocular camera.";
  };
  port out or::sensor::intrinsics Intrinsics;
  port out or::sensor::extrinsics Extrinsics;

  /* ------------------ TASK DEFINITION -------------------- */
  task publish {
    period 100 ms;
    doc "Publish from Monocular Camera.";

    throw e_OUT_OF_MEM, e_BAD_IMAGE_PORT;
  };

  /* ------------------ ACTIVITY DEFINITION --------------------- */

  activity publish_data() {
    doc "Publish monocular images with intrinsics and extrinsics.";
    after set_device, set_resolution;
    task publish;

    codel <start> InitIDS(ids out image_frame, ids out intrinsics, ids out extrinsics, ids in debug)
          yield pause::start, main, ether;
    codel <main> PublishCamera(ids in image_frame, ids in intrinsics, ids in extrinsics, port out ImageFrame, port out Intrinsics, port out Extrinsics,
          ids in debug, ids in show_frames)
          yield main, ether;

    throw e_BAD_IMAGE_PORT, e_OPENCV_ERROR, e_BAD_CONFIG, e_OUT_OF_MEM;
  };

  /* ------------------ SERVICE DEFINITION: Attributes -------------------- */


  /* ------------------ SERVICE DEFINITION: Functions -------------------- */
  function set_debug(in boolean is_debug_mode = FALSE : "Set debug mode (default: false)" ) {
    doc "Set the debug mode.";
    codel SetDebug(local in is_debug_mode, ids out debug);
  };

  function show_image_frames(in boolean show_cv_frames = FALSE : "Show image frames (default: false)" ) {
    doc "Show image frames.";
    codel ShowFrames(local in show_cv_frames, ids out show_frames);
  };

  function set_verbose_level(in octet verbose_level = 0 : "Verbose level") {
    doc "Set the verbose level.";
    codel SetVerboseLevel(local in verbose_level, ids out v_level);
  };

  function set_device(in string<128> device = "/dev/video0" : "Device path") {
    doc "Set the device path.";
    codel SetDevice(local in device, ids out image_frame);
  };

  function set_resolution(in short width = 640 : "Image width", in short height = 480 : "Image height") {
    doc "Set the image resolution.";
    codel SetResolution(local in width, local in height, ids out image_frame);
  };
};