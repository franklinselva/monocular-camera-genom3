/*
 * Copyright (c) 2022-2023 LAAS/CNRS
 *
 * Author: Selvakumar H S - LAAS/CNRS
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma require "felix-idl"
#pragma require "vision-idl"

#include "or/sensor/camera.gen"

// TODO: Add checkerboard detection and calibration
// TODO: Add Intrinsics and Extrinsics
/* -------------------------- MODULE DECLARATION --------------------------- */
component MonocularCamera {
  version "1.0";
  email	  "shasthamsa@laas.fr";
  lang	  "c";
  require "genom3 >= 2.99.26";
  doc 	  "A GenoM module for monocular camera integration.";

  codels-require "opencv4, felix-g3utils, vision-idl";

  exception e_BAD_IMAGE_PORT { short code; string<128> message; };
  exception e_OPENCV_ERROR { short code; string<128> message; };
  exception e_OUT_OF_MEM { short code; string<128> message; };
  exception e_BAD_CONFIG { short code; string<128> message; };

  struct CameraInfo {
        struct size_s {
            unsigned short w, h;
        } size;
        unsigned short frequency;
        string<8> format;   // Y8, Y16, RBG8, RGBA8...

        boolean started;
        short compression_rate;
        float hfov;
  };

  /* -------------------------- IDS --------------------------- */
  ids {
    CameraInfo info;
    string<128> device;

    boolean debug, show_frames;
    octet image_width, image_height;
    octet verbose_level;
  };

  /* ------------- DEFINITION OF PORTS -------------- */
  // Camera
  port multiple out or::sensor::frame Frame {
    doc "The image frame from monocular camera.";
  };
  port out or::sensor::intrinsics Intrinsics {
    doc "The intrinsics of the camera.";
  };
  port out or::sensor::extrinsics Extrinsics {
    doc "The extrinsics of the camera.";
  };

  /* ------------------ TASK DEFINITION -------------------- */
  task publish {
    period 100 ms;
    doc "Publish from Monocular Camera.";

    codel<start> camera_start(ids inout info, ids in device, port out Frame, port out Extrinsics, port out Intrinsics, ids in debug)
        yield pub, pause::start;

    codel<pub> camera_publish(ids in info, port out Frame, port out Extrinsics, port out Intrinsics, ids in show_frames, ids in debug)
        yield pub, pause::pub, ether;

    throw e_OUT_OF_MEM, e_BAD_IMAGE_PORT;
  };

  /* ------------------ ACTIVITY DEFINITION --------------------- */
  activity start_camera() {
    doc "Start the camera.";
    task publish;
    before stop_camera;
    after set_device, set_resolution;
    validate check_device(ids in device);

    codel<start> StartCamera(ids out info.started)
        yield ether;

    throws e_BAD_CONFIG;
  };

  activity stop_camera() {
    doc "Stop the camera.";
    task publish;
    after start_camera;

    codel<start> StopCamera(ids out info.started)
        yield ether;

    throws e_BAD_CONFIG;
  };

  /* ------------------ SERVICE DEFINITION: Attributes -------------------- */
  attribute set_debug(in debug = FALSE : "Enable debug (default: false)" ) {
    doc "Set the debug mode.";
  };

  attribute show_image_frames(in show_frames = TRUE : "Enable image frames (default: true)") {
    doc "Show image frames.";
  };

  attribute set_verbose_level(in verbose_level = 0 : "Verbose level") {
    doc "Set the verbose level.";
  };

  attribute set_device(in device = "/dev/video0" : "Device path") {
    doc "Set the device path.";
  };

  /* ------------------ SERVICE DEFINITION: Functions -------------------- */

  function set_resolution(in short width = 640 : "Image width", in short height = 480 : "Image height") {
    doc "Set the image resolution.";
    codel SetResolution(local in width, local in height, ids out info.size);
  };

  function set_compression(in short compression_percent = -1 : "Compression ration in percentage (0 - 100) (-1 for no compresstion)") {
    doc "Set the compression ratio.";
    codel SetCompression(local in compression_percent, ids out info.compression_rate);
  };
};